#!/bin/bash

DEVICE=nx531j
VENDOR=zte


PROPRIETARY_FILES=proprietary-files.txt

VENDOR_DIR=vendor/$VENDOR/$DEVICE

MK_ANDROID=../../../$VENDOR_DIR/Android.mk

MK_VENDOR=../../../$VENDOR_DIR/$DEVICE-vendor.mk
MK_VENDOR_BLOBS=../../../$VENDOR_DIR/$DEVICE-vendor-blobs.mk

MK_BOARD_CONFIG_VENDOR=../../../$VENDOR_DIR/BoardConfigVendor.mk

HEADER="$(cat << EOF
# Copyright (C) 2016 The CyanogenMod Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is generated by device/$VENDOR/$DEVICE/setup-makefiles.sh
EOF)"

NOT_COMMENT_OR_BLANK='(^#|^$)'
SIGNING_NEEDED='^[-!].+'


echo "$HEADER" > $MK_VENDOR_BLOBS
echo "" >> $MK_VENDOR_BLOBS
echo "PRODUCT_COPY_FILES += \\" >> $MK_VENDOR_BLOBS

COUNT=$(wc -l $PROPRIETARY_FILES | awk {'print $1'})
COUNT=$(expr $COUNT - $(egrep -c $NOT_COMMENT_OR_BLANK $PROPRIETARY_FILES))
for FILE in $(egrep -v $NOT_COMMENT_OR_BLANK $PROPRIETARY_FILES); do
  COUNT=$(expr $COUNT - 1)
  if [[ ! "$FILE" =~ $SIGNING_NEEDED ]]; then
    if [ $COUNT != "0" ]; then
      echo "    $VENDOR_DIR/proprietary/$FILE:system/$FILE \\" >> $MK_VENDOR_BLOBS
    else
      echo "    $VENDOR_DIR/proprietary/$FILE:system/$FILE" >> $MK_VENDOR_BLOBS
    fi
  fi
done


echo "$HEADER" > $MK_VENDOR
echo "" >> $MK_VENDOR
echo "PRODUCT_PACKAGES += \\" >> $MK_VENDOR

COUNT=$(wc -l $PROPRIETARY_FILES | awk {'print $1'})
COUNT=$(expr $COUNT - $(egrep -c $NOT_COMMENT_OR_BLANK $PROPRIETARY_FILES))
for LINE in $(egrep -v $NOT_COMMENT_OR_BLANK $PROPRIETARY_FILES); do
  COUNT=$(expr $COUNT - 1)
  if [[ "$LINE" =~ $SIGNING_NEEDED ]]; then
    FILE=${LINE:1}

    MODULE=$(basename $FILE)
    MODULE=${MODULE%.*}

    if [ $COUNT != "0" ]; then
      echo "    $MODULE \\" >> $MK_VENDOR
    else
      echo "    $MODULE" >> $MK_VENDOR
    fi
  fi
done

echo "" >> $MK_VENDOR
echo "\$(call inherit-product, vendor/$VENDOR/$DEVICE/$DEVICE-vendor-blobs.mk)" >> $MK_VENDOR


echo "$HEADER" > $MK_BOARD_CONFIG_VENDOR


echo "$HEADER" > $MK_ANDROID
(cat << EOF) >> $MK_ANDROID

LOCAL_PATH := \$(call my-dir)

ifeq (\$(TARGET_DEVICE),$DEVICE)
EOF

echo "" >> $MK_ANDROID

for LINE in $(egrep -v $NOT_COMMENT_OR_BLANK $PROPRIETARY_FILES); do
  if [[ "$LINE" =~ $SIGNING_NEEDED ]]; then
    FILE=${LINE:1}

    MODULE=$(basename $FILE)
    MODULE=${MODULE%.*}

    SUFFIX=${FILE##*.}

    echo "include \$(CLEAR_VARS)" >> $MK_ANDROID
    echo "LOCAL_MODULE := $MODULE" >> $MK_ANDROID
    echo "LOCAL_MODULE_OWNER := $VENDOR" >> $MK_ANDROID
    echo "LOCAL_SRC_FILES := proprietary/$FILE" >> $MK_ANDROID
    echo "LOCAL_MODULE_TAGS := optional" >> $MK_ANDROID

    case $SUFFIX in
      jar)
        echo "LOCAL_MODULE_SUFFIX := \$(COMMON_JAVA_PACKAGE_SUFFIX)" >> $MK_ANDROID
        echo "LOCAL_MODULE_CLASS := JAVA_LIBRARIES" >> $MK_ANDROID
      ;;
      apk)
        echo "LOCAL_MODULE_SUFFIX := \$(COMMON_ANDROID_PACKAGE_SUFFIX)" >> $MK_ANDROID
        echo "LOCAL_MODULE_CLASS := APPS" >> $MK_ANDROID
        if [[ "$FILE" =~ ^priv-app\/.* ]]; then
          echo "LOCAL_PRIVILEGED_MODULE := true" >> $MK_ANDROID
        elif [[ "$FILE" =~ ^vendor\/app\/.* ]]; then
          echo "LOCAL_PROPRIETARY_MODULE := true" >> $MK_ANDROID
        fi
      ;;
    esac

    case ${LINE:0:1} in
      '!')
        echo "LOCAL_CERTIFICATE := platform" >> $MK_ANDROID
      ;;

      '-')
        echo "LOCAL_CERTIFICATE := shared" >> $MK_ANDROID
      ;;
    esac

    echo "include \$(BUILD_PREBUILT)" >> $MK_ANDROID
    echo "" >> $MK_ANDROID
  fi
done

(cat << EOF) >> $MK_ANDROID
\$(shell mkdir -p \$(PRODUCT_OUT)/system/vendor/lib/egl && pushd \$(PRODUCT_OUT)/system/vendor/lib > /dev/null && ln -s egl/libEGL_adreno.so libEGL_adreno.so && popd > /dev/null)
\$(shell mkdir -p \$(PRODUCT_OUT)/system/vendor/lib64/egl && pushd \$(PRODUCT_OUT)/system/vendor/lib64 > /dev/null && ln -s egl/libEGL_adreno.so libEGL_adreno.so && popd > /dev/null)

endif
EOF
